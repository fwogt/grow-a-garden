-- DEMONHUB UI for Roblox Farming Game
-- Version: 1.0.4
local function createUI(tables, functions, services, settings, coroutines, petData, petModelCache)
    local WindUI = loadstring(game:HttpGet("https://github.com/Footagesus/WindUI/releases/latest/download/main.lua"))()
    local mutationNames = {}
    for mutation, _ in pairs(tables.Mutations) do table.insert(mutationNames, mutation) end
    table.sort(mutationNames)

    local Window = WindUI:CreateWindow({
        Title = "DEMONHUB",
        Icon = "rbxassetid://7733964712",
        Author = "DEMONHUB Team",
        Folder = "DEMONHUB",
        Size = UDim2.fromOffset(500, 400),
        Theme = "Dark",
        HasOutline = true,
        KeySystem = {
            Key = {"DEMON123", "HUB456"},
            Note = "Enter key: DEMON123 or HUB456",
            SaveKey = true
        }
    })

    local Tabs = {}
    Tabs.PetsSection = Window:Section({Title = "Pets", Opened = true})
    Tabs.PetsTab = Tabs.PetsSection:Tab({Title = "Pets", Icon = "paw-print", Desc = "Manage your pets"})
    Tabs.EggsTab = Tabs.PetsSection:Tab({Title = "Eggs", Icon = "egg", Desc = "Manage egg hatching and planting"})
    Tabs.PurchasesSection = Window:Section({Title = "Purchases", Opened = false})
    Tabs.PurchasesTab = Tabs.PurchasesSection:Tab({Title = "Buy Items", Icon = "shopping-cart", Desc = "Purchase eggs, seeds, and gear"})
    Tabs.FarmingSection = Window:Section({Title = "Farming", Opened = false})
    Tabs.FarmingTab = Tabs.FarmingSection:Tab({Title = "Plants", Icon = "sprout", Desc = "Auto planting"})
    Tabs.HarvestingSection = Window:Section({Title = "Harvesting", Opened = false})
    Tabs.HarvestingTab = Tabs.HarvestingSection:Tab({Title = "Auto Harvesting", Icon = "apple", Desc = "Auto harvest"})
    Tabs.SellingSection = Window:Section({Title = "Selling", Opened = false})
    Tabs.SellingTab = Tabs.SellingSection:Tab({Title = "Auto Selling", Icon = "dollar-sign", Desc = "Sell fruits and pets automatically"})
    Tabs.VisualsSection = Window:Section({Title = "Visuals", Opened = false})
    Tabs.VisualsTab = Tabs.VisualsSection:Tab({Title = "ESP Visuals", Icon = "eye", Desc = "Enable ESP"})
    Tabs.SprinklersSection = Window:Section({Title = "Sprinklers", Opened = false})
    Tabs.DeleteTab = Tabs.SprinklersSection:Tab({Title = "Delete", Icon = "trash", Desc = "Delete sprinklers"})
    Tabs.MiscSection = Window:Section({Title = "Miscellaneous", Opened = true})
    Tabs.MiscTab = Tabs.MiscSection:Tab({Title = "Misc Options", Icon = "settings", Desc = "Additional features"})

    local petDropdown
    local petNames = {"[Click Refresh]"}
    petDropdown = Tabs.PetsTab:Dropdown({
        Title = "Select Pets",
        Values = petNames,
        Value = {},
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.selectedPets = {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for petId, petName in pairs(petData) do
                for _, selectedName in ipairs(selectedOptions) do
                    if petName == selectedName then table.insert(settings.selectedPets, petId) end
                end
            end
            if settings.autoMiddleActive and #settings.selectedPets == 0 then
                functions.stopCoroutine("AutoMiddle", coroutines)
                settings.autoMiddleActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.PetsTab:Button({
        Title = "Refresh Pets",
        Icon = "refresh-cw",
        Callback = function()
            petData = functions.getPetNames(services)
            petNames = {}
            for _, name in pairs(petData) do
                if name and name ~= "" then table.insert(petNames, name) end
            end
            if petDropdown then pcall(function() petDropdown:Destroy() end) end
            petNames = #petNames > 0 and petNames or {"[No Pets Found]"}
            petDropdown = Tabs.PetsTab:Dropdown({
                Title = "Select Pets",
                Values = petNames,
                Value = #petNames > 0 and {petNames[1]} or {},
                Multi = true,
                AllowNone = true,
                Callback = function(selectedOptions)
                    settings.selectedPets = {}
                    selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
                    for petId, petName in pairs(petData) do
                        for _, selectedName in ipairs(selectedOptions) do
                            if petName == selectedName then table.insert(settings.selectedPets, petId) end
                        end
                    end
                    if settings.autoMiddleActive and #settings.selectedPets == 0 then
                        functions.stopCoroutine("AutoMiddle", coroutines)
                        settings.autoMiddleActive = false
                    end
                    functions.saveSettings(settings)
                end
            })
            settings.selectedPets = {}
            if #petNames > 0 then
                for petId, petName in pairs(petData) do
                    if petName == petNames[1] then table.insert(settings.selectedPets, petId) end
                end
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.PetsTab:Toggle({
        Title = "Auto Middle",
        Icon = "toggle-right",
        Value = settings.autoMiddleActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoMiddleActive = value
            if settings.autoMiddleActive and #settings.selectedPets > 0 then
                functions.startCoroutine("AutoMiddle", function()
                    while coroutines.AutoMiddle and coroutines.AutoMiddle.running and #settings.selectedPets > 0 do
                        for _, petId in ipairs(settings.selectedPets) do
                            pcall(function()
                                services.ActivePetService:FireServer("SetPetState", petId, "Idle")
                                functions.sendNotification(services, string.format("Set %s to Idle", petId), "#008000")
                            end)
                        end
                        wait(0.2)
                    end
                    settings.autoMiddleActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoMiddle", coroutines)
                settings.autoMiddleActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local sellPetDropdown = Tabs.PetsTab:Dropdown({
        Title = "Select Pet to Sell",
        Values = {"All", unpack(tables.allPets)},
        Value = settings.SelectedSellPet,
        AllowNone = true,
        Callback = function(value)
            settings.SelectedSellPet = value == "All" and nil or value
            if settings.autoSellPetsActive and not settings.SelectedSellPet then
                functions.stopCoroutine("AutoSellPets", coroutines)
                settings.autoSellPetsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.PetsTab:Slider({
        Title = "Max Pet Weight (kg)",
        Value = {
            Min = 0,
            Max = 100,
            Default = settings.PetWeightThreshold,
        },
        Callback = function(value)
            settings.PetWeightThreshold = value
            functions.saveSettings(settings)
        end
    })

    Tabs.PetsTab:Slider({
        Title = "Max Pet Age",
        Value = {
            Min = 0,
            Max = 100,
            Default = settings.PetAgeThreshold,
        },
        Callback = function(value)
            settings.PetAgeThreshold = value
            functions.saveSettings(settings)
        end
    })

    Tabs.PetsTab:TextBox({
        Title = "Sell Pets Delay (min)",
        Value = tostring(settings.SellPetDelay),
        Callback = function(value)
            local num = tonumber(value)
            if num and num >= 1 and num <= 60 then
                settings.SellPetDelay = num
                functions.saveSettings(settings)
            else
                functions.sendNotification(services, "Invalid delay! Enter a number between 1 and 60.", "#b0171a")
            end
        end
    })

    Tabs.PetsTab:Toggle({
        Title = "Auto Sell Pets",
        Icon = "dollar-sign",
        Value = settings.autoSellPetsActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoSellPetsActive = value
            if settings.autoSellPetsActive then
                functions.startCoroutine("AutoSellPets", function()
                    while coroutines.AutoSellPets and coroutines.AutoSellPets.running do
                        local soldCount = functions.sellPets(services, settings, tables)
                        if soldCount > 0 then
                            functions.sendNotification(services, string.format("Sold %d pets successfully!", soldCount), "#008000")
                        else
                            functions.sendNotification(services, "No pets sold!", "#b0171a")
                        end
                        wait(settings.SellPetDelay * 60)
                    end
                    settings.autoSellPetsActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoSellPets", coroutines)
                settings.autoSellPetsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local eggDropdown = Tabs.EggsTab:Dropdown({
        Title = "Select Eggs",
        Values = {"All", unpack(tables.eggs)},
        Value = settings.selectedEggs,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.selectedEggs = table.find(selectedOptions, "All") and tables.eggs or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, egg in ipairs(selectedOptions) do
                if table.find(tables.eggs, egg) then table.insert(settings.selectedEggs, egg) end
            end
            if settings.autoHatchEggsActive and #settings.selectedEggs == 0 then
                functions.stopCoroutine("AutoHatchEggs", coroutines)
                settings.autoHatchEggsActive = false
            end
            if settings.autoPlantEggsActive and #settings.selectedEggs == 0 then
                functions.stopCoroutine("AutoPlantEggs", coroutines)
                settings.autoPlantEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.EggsTab:Dropdown({
        Title = "Egg Action",
        Values = {"Hatch", "Plant"},
        Value = settings.selectedEggAction,
        Callback = function(value)
            settings.selectedEggAction = value
            if settings.autoHatchEggsActive and settings.selectedEggAction == "Plant" then
                functions.stopCoroutine("AutoHatchEggs", coroutines)
                settings.autoHatchEggsActive = false
            elseif settings.autoPlantEggsActive and settings.selectedEggAction == "Hatch" then
                functions.stopCoroutine("AutoPlantEggs", coroutines)
                settings.autoPlantEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.EggsTab:Slider({
        Title = "Hatch Delay (ms)",
        Value = {
            Min = 100,
            Max = 2000,
            Default = settings.EggHatchDelay * 1000,
        },
        Callback = function(value)
            settings.EggHatchDelay = value / 1000
            functions.saveSettings(settings)
        end
    })

    Tabs.EggsTab:Slider({
        Title = "Plant Egg Delay (ms)",
        Value = {
            Min = 100,
            Max = 2000,
            Default = settings.EggPlantDelay * 1000,
        },
        Callback = function(value)
            settings.EggPlantDelay = value / 1000
            functions.saveSettings(settings)
        end
    })

    Tabs.EggsTab:Toggle({
        Title = "Auto Hatch Eggs",
        Icon = "egg",
        Value = settings.autoHatchEggsActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoHatchEggsActive = value
            if settings.autoHatchEggsActive and #settings.selectedEggs > 0 and settings.selectedEggAction == "Hatch" then
                functions.startCoroutine("AutoHatchEggs", function()
                    local character = services.LocalPlayer.Character
                    if not character or not character:FindFirstChild("HumanoidRootPart") then
                        functions.sendNotification(services, "Character not found for hatching eggs!", "#b0171a")
                        settings.autoHatchEggsActive = false
                        return
                    end
                    local humanoidRootPart = character.HumanoidRootPart
                    local playerFarm = functions.findPlayerFarm(services)
                    if not playerFarm then
                        functions.sendNotification(services, "Player farm not found for hatching eggs!", "#b0171a")
                        settings.autoHatchEggsActive = false
                        return
                    end
                    local objectsPhysical = playerFarm:FindFirstChild("Important") and playerFarm.Important:FindFirstChild("Objects_Physical")
                    if not objectsPhysical then
                        functions.sendNotification(services, "Objects folder not found for hatching eggs!", "#b0171a")
                        settings.autoHatchEggsActive = false
                        return
                    end
                    while coroutines.AutoHatchEggs and coroutines.AutoHatchEggs.running and #settings.selectedEggs > 0 do
                        local eggList = {}
                        for _, petEgg in ipairs(objectsPhysical:GetChildren()) do
                            if petEgg.Name == "PetEgg" and petEgg:IsA("Model") then
                                for _, egg in ipairs(petEgg:GetChildren()) do
                                    if egg:IsA("Model") and table.find(settings.selectedEggs, egg.Name) then
                                        table.insert(eggList, egg)
                                    end
                                end
                            end
                        end
                        if #eggList == 0 then
                            functions.sendNotification(services, "No matching eggs found to hatch!", "#b0171a")
                            settings.autoHatchEggsActive = false
                            return
                        end
                        for _, egg in ipairs(eggList) do
                            local hitBox = egg:FindFirstChild("HitBox") or egg:FindFirstChildWhichIsA("BasePart")
                            local proximityPrompt = egg:FindFirstChild("ProximityPrompt", true)
                            if not hitBox or not proximityPrompt then continue end
                            local eggHeight = hitBox.Size.Y
                            humanoidRootPart.CFrame = hitBox.CFrame + Vector3.new(0, eggHeight + 3, 0)
                            wait(0.5)
                            pcall(function()
                                fireproximityprompt(proximityPrompt)
                                functions.sendNotification(services, string.format("Hatched %s egg!", egg.Name), "#008000")
                            end)
                            wait(settings.EggHatchDelay)
                        end
                        wait(1)
                    end
                    settings.autoHatchEggsActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoHatchEggs", coroutines)
                settings.autoHatchEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.EggsTab:Toggle({
        Title = "Auto Plant Eggs",
        Icon = "sprout",
        Value = settings.autoPlantEggsActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoPlantEggsActive = value
            if settings.autoPlantEggsActive and #settings.selectedEggs > 0 and settings.selectedEggAction == "Plant" then
                functions.startCoroutine("AutoPlantEggs", function()
                    local character = services.LocalPlayer.Character
                    if not character or not character:FindFirstChild("Humanoid") then
                        functions.sendNotification(services, "Character not found for planting eggs!", "#b0171a")
                        settings.autoPlantEggsActive = false
                        return
                    end
                    local playerFarm = functions.findPlayerFarm(services)
                    if not playerFarm then
                        functions.sendNotification(services, "Player farm not found for planting eggs!", "#b0171a")
                        settings.autoPlantEggsActive = false
                        return
                    end
                    local plantLocationsFolder = playerFarm:FindFirstChild("Important") and playerFarm.Important:FindFirstChild("Plant_Locations")
                    if not plantLocationsFolder then
                        functions.sendNotification(services, "Plant locations not found!", "#b0171a")
                        settings.autoPlantEggsActive = false
                        return
                    end
                    local placedEggs = {}
                    while coroutines.AutoPlantEggs and coroutines.AutoPlantEggs.running and #settings.selectedEggs > 0 do
                        local locations = {}
                        local basePlate = plantLocationsFolder:GetChildren()[2]
                        if basePlate then
                            if basePlate:IsA("BasePart") then
                                table.insert(locations, basePlate.Position)
                            else
                                for _, part in ipairs(basePlate:GetDescendants()) do
                                    if part:IsA("BasePart") then
                                        table.insert(locations, part.Position)
                                    end
                                end
                            end
                        else
                            functions.sendNotification(services, "Base plate not found!", "#b0171a")
                            settings.autoPlantEggsActive = false
                            return
                        end
                        if #locations == 0 then wait(1) continue end
                        local availableLocations = {}
                        for _, position in ipairs(locations) do
                            local isValid = true
                            for _, eggPos in ipairs(placedEggs) do
                                if (position - eggPos).Magnitude < 5 then
                                    isValid = false
                                    break
                                end
                            end
                            if isValid then table.insert(availableLocations, position) end
                        end
                        if #availableLocations == 0 then
                            functions.sendNotification(services, "No available locations to plant eggs!", "#b0171a")
                            wait(1)
                            continue
                        end
                        for _, egg in ipairs(settings.selectedEggs) do
                            local eggTool = nil
                            for _, item in ipairs(services.LocalPlayer.Backpack:GetChildren()) do
                                if item:IsA("Tool") and string.find(item.Name, egg, 1, true) then
                                    eggTool = item
                                    break
                                end
                            end
                            if not eggTool then
                                functions.sendNotification(services, string.format("Egg not found: %s", egg), "#b0171a")
                                continue
                            end
                            character.Humanoid:EquipTool(eggTool)
                            local randomIndex = math.random(1, #availableLocations)
                            local position = availableLocations[randomIndex]
                            local success = pcall(function()
                                services.ReplicatedStorage.GameEvents.PetEggService:FireServer("CreateEgg", position)
                            end)
                            if success then
                                table.insert(placedEggs, position)
                                functions.sendNotification(services, string.format("Planted %s egg!", egg), "#008000")
                            end
                            wait(settings.EggPlantDelay)
                        end
                        wait(1)
                    end
                    settings.autoPlantEggsActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoPlantEggs", coroutines)
                settings.autoPlantEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local eggDropdownPurchases = Tabs.PurchasesTab:Dropdown({
        Title = "Select Eggs to Buy",
        Values = {"All", unpack(tables.eggs)},
        Value = settings.selectedEggs,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.selectedEggs = table.find(selectedOptions, "All") and tables.eggs or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, egg in ipairs(selectedOptions) do
                if table.find(tables.eggs, egg) then table.insert(settings.selectedEggs, egg) end
            end
            if settings.autoBuyEggsActive and #settings.selectedEggs == 0 then
                functions.stopCoroutine("AutoBuyEggs", coroutines)
                settings.autoBuyEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local seedDropdown = Tabs.PurchasesTab:Dropdown({
        Title = "Select Seeds",
        Values = {"All", unpack(tables.seedShopSeeds)},
        Value = settings.selectedSeeds,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.selectedSeeds = table.find(selectedOptions, "All") and tables.seedShopSeeds or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, seed in ipairs(selectedOptions) do
                if table.find(tables.seedShopSeeds, seed) then table.insert(settings.selectedSeeds, seed) end
            end
            functions.saveSettings(settings)
        end
    })

    local gearDropdown = Tabs.PurchasesTab:Dropdown({
        Title = "Select Gear",
        Values = {"All", unpack(tables.gears)},
        Value = settings.selectedGears,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.selectedGears = table.find(selectedOptions, "All") and tables.gears or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, gear in ipairs(selectedOptions) do
                if table.find(tables.gears, gear) then table.insert(settings.selectedGears, gear) end
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.PurchasesTab:Toggle({
        Title = "Auto Buy Eggs",
        Icon = "repeat",
        Value = settings.autoBuyEggsActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoBuyEggsActive = value
            if settings.autoBuyEggsActive and #settings.selectedEggs > 0 then
                functions.startCoroutine("AutoBuyEggs", function()
                    while coroutines.AutoBuyEggs and coroutines.AutoBuyEggs.running do
                        for _, egg in ipairs(settings.selectedEggs) do
                            pcall(function()
                                services.BuyPetEgg:FireServer(egg)
                                functions.sendNotification(services, string.format("Bought %s egg!", egg), "#008000")
                            end)
                            wait(0.2)
                        end
                        wait(1)
                    end
                    settings.autoBuyEggsActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoBuyEggs", coroutines)
                settings.autoBuyEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.PurchasesTab:Toggle({
        Title = "Auto Buy Seeds",
        Icon = "repeat",
        Value = settings.autoBuySeedsActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoBuySeedsActive = value
            if settings.autoBuySeedsActive and #settings.selectedSeeds > 0 then
                functions.startCoroutine("AutoBuySeeds", function()
                    while coroutines.AutoBuySeeds and coroutines.AutoBuySeeds.running do
                        for _, seed in ipairs(settings.selectedSeeds) do
                            pcall(function()
                                services.BuySeedStock:FireServer(seed)
                                functions.sendNotification(services, string.format("Bought %s seed!", seed), "#008000")
                            end)
                            wait(0.2)
                        end
                        wait(1)
                    end
                    settings.autoBuySeedsActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoBuySeeds", coroutines)
                settings.autoBuySeedsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.PurchasesTab:Toggle({
        Title = "Auto Buy Gear",
        Icon = "repeat",
        Value = settings.autoBuyGearActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoBuyGearActive = value
            if settings.autoBuyGearActive and #settings.selectedGears > 0 then
                functions.startCoroutine("AutoBuyGear", function()
                    while coroutines.AutoBuyGear and coroutines.AutoBuyGear.running do
                        for _, gear in ipairs(settings.selectedGears) do
                            pcall(function()
                                services.BuyGearStock:FireServer(gear)
                                functions.sendNotification(services, string.format("Bought %s gear!", gear), "#008000")
                            end)
                            wait(0.2)
                        end
                        wait(1)
                    end
                    settings.autoBuyGearActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoBuyGear", coroutines)
                settings.autoBuyGearActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local seedInventoryDropdown
    local function updateSeedInventoryDropdown()
        local seedInventory = functions.getSeedInventory(services, tables)
        if seedInventoryDropdown then pcall(function() seedInventoryDropdown:Destroy() end) end
        seedInventoryDropdown = Tabs.FarmingTab:Dropdown({
            Title = "Select Seed to Plant",
            Values = #seedInventory > 0 and seedInventory or {"[No Seeds Found]"},
            Value = settings.selectedSeed,
            Callback = function(value)
                settings.selectedSeed = value
                if settings.autoPlantActive and not functions.equipSeed(settings.selectedSeed, services) then
                    functions.stopCoroutine("AutoPlant", coroutines)
                    settings.autoPlantActive = false
                end
                functions.saveSettings(settings)
            end
        })
    end

    Tabs.FarmingTab:Dropdown({
        Title = "Planting Location",
        Values = {"Current Location", "Saved Location"},
        Value = settings.plantingMode,
        Callback = function(value)
            settings.plantingMode = value
            if settings.autoPlantActive and settings.plantingMode == "Saved Location" and not settings.savedPlantingLocation then
                functions.stopCoroutine("AutoPlant", coroutines)
                settings.autoPlantActive = false
            end
            if settings.autoPlantEggsActive and settings.plantingMode == "Saved Location" and not settings.savedPlantingLocation then
                functions.stopCoroutine("AutoPlantEggs", coroutines)
                settings.autoPlantEggsActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.FarmingTab:Button({
        Title = "Save Current Location",
        Icon = "map-pin",
        Callback = function()
            local character = services.LocalPlayer.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                settings.savedPlantingLocation = character.HumanoidRootPart.Position
                functions.sendNotification(services, "Saved current planting location!", "#008000")
                functions.saveSettings(settings)
            else
                functions.sendNotification(services, "Failed to save location: Character missing!", "#b0171a")
            end
        end
    })

    Tabs.FarmingTab:Button({
        Title = "Refresh Seed Inventory",
        Icon = "refresh-cw",
        Callback = function()
            updateSeedInventoryDropdown()
        end
    })

    Tabs.FarmingTab:Slider({
        Title = "Plant Delay (ms)",
        Value = {
            Min = 1,
            Max = 1000,
            Default = settings.PlantDelay * 1000,
        },
        Callback = function(value)
            settings.PlantDelay = value / 1000
            functions.saveSettings(settings)
        end
    })

    Tabs.FarmingTab:Toggle({
        Title = "Auto Plant",
        Icon = "sprout",
        Value = settings.autoPlantActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoPlantActive = value
            if settings.autoPlantActive then
                if not functions.equipSeed(settings.selectedSeed, services) then
                    settings.autoPlantActive = false
                    functions.saveSettings(settings)
                    return
                end
                if settings.plantingMode == "Saved Location" and not settings.savedPlantingLocation then
                    functions.sendNotification(services, "No saved planting location!", "#b0171a")
                    settings.autoPlantActive = false
                    functions.saveSettings(settings)
                    return
                end
                functions.startCoroutine("AutoPlant", function()
                    while coroutines.AutoPlant and coroutines.AutoPlant.running do
                        local position = functions.getPlantingPosition(services, settings)
                        if position then
                            pcall(function()
                                services.Plant_RE:FireServer(position, settings.selectedSeed)
                                functions.sendNotification(services, string.format("Planted %s!", settings.selectedSeed), "#008000")
                            end)
                        end
                        wait(settings.PlantDelay)
                    end
                    settings.autoPlantActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoPlant", coroutines)
                settings.autoPlantActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local fruitDropdown = Tabs.HarvestingTab:Dropdown({
        Title = "Select Fruits to Harvest",
        Values = {"All", unpack(tables.allFruits)},
        Value = settings.TargetFruits,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.TargetFruits = table.find(selectedOptions, "All") and {} or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, fruit in ipairs(selectedOptions) do
                if table.find(tables.allFruits, fruit) then table.insert(settings.TargetFruits, fruit) end
            end
            functions.saveSettings(settings)
        end
    })

    local mutationDropdown = Tabs.HarvestingTab:Dropdown({
        Title = "Select Mutations to Harvest",
        Values = {"All", unpack(mutationNames)},
        Value = settings.TargetMutations,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.TargetMutations = table.find(selectedOptions, "All") and {} or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, mutation in ipairs(selectedOptions) do
                if table.find(mutationNames, mutation) then table.insert(settings.TargetMutations, mutation) end
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.HarvestingTab:Slider({
        Title = "Minimum Fruit Weight (kg)",
        Value = {
            Min = 0,
            Max = 100,
            Default = settings.MinimumWeight,
        },
        Callback = function(value)
            settings.MinimumWeight = value
            functions.saveSettings(settings)
        end
    })

    Tabs.HarvestingTab:Toggle({
        Title = "Auto Harvest",
        Icon = "apple",
        Value = settings.autoHarvestActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoHarvestActive = value
            if settings.autoHarvestActive then
                functions.startCoroutine("AutoHarvest", function()
                    while coroutines.AutoHarvest and coroutines.AutoHarvest.running do
                        local plants = functions.GetHarvestablePlants(services, tables, settings)
                        for _, plant in ipairs(plants) do
                            functions.HarvestPlant(plant, services)
                        end
                        wait(settings.HarvestDelay)
                    end
                    settings.autoHarvestActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoHarvest", coroutines)
                settings.autoHarvestActive = false
            end
            functions.saveSettings(settings)
        end
    })

    local protectedFruitDropdown = Tabs.SellingTab:Dropdown({
        Title = "Select Protected Fruits",
        Values = {"All", unpack(tables.allFruits)},
        Value = settings.ProtectedFruits,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.ProtectedFruits = table.find(selectedOptions, "All") and tables.allFruits or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, fruit in ipairs(selectedOptions) do
                if table.find(tables.allFruits, fruit) then table.insert(settings.ProtectedFruits, fruit) end
            end
            functions.saveSettings(settings)
        end
    })

    local protectedMutationDropdown = Tabs.SellingTab:Dropdown({
        Title = "Select Protected Mutations",
        Values = {"All", unpack(mutationNames)},
        Value = settings.ProtectedMutations,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.ProtectedMutations = table.find(selectedOptions, "All") and mutationNames or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, mutation in ipairs(selectedOptions) do
                if table.find(mutationNames, mutation) then table.insert(settings.ProtectedMutations, mutation) end
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.SellingTab:Button({
        Title = "Favorite Protected Fruits",
        Icon = "star",
        Callback = function()
            local favoredCount = functions.favoriteFruits(services, settings, tables)
            if favoredCount > 0 then
                functions.sendNotification(services, string.format("Favorited %d fruits!", favoredCount), "#008000")
            else
                functions.sendNotification(services, "No fruits favorited!", "#b0171a")
            end
        end
    })

    Tabs.SellingTab:Button({
        Title = "Unfavorite Protected Fruits",
        Icon = "star-off",
        Callback = function()
            local unfavoredCount = functions.unfavoriteFruits(services, settings, tables)
            if unfavoredCount > 0 then
                functions.sendNotification(services, string.format("Unfavorited %d fruits!", unfavoredCount), "#008000")
            else
                functions.sendNotification(services, "No fruits unfavorited!", "#b0171a")
            end
        end
    })

    Tabs.SellingTab:TextBox({
        Title = "Sell Delay (min)",
        Value = tostring(settings.SellDelay),
        Callback = function(value)
            local num = tonumber(value)
            if num and num >= 1 and num <= 60 then
                settings.SellDelay = num
                functions.saveSettings(settings)
            else
                functions.sendNotification(services, "Invalid delay! Enter a number between 1 and 60.", "#b0171a")
            end
        end
    })

    Tabs.SellingTab:Toggle({
        Title = "Auto Sell",
        Icon = "dollar-sign",
        Value = settings.autoSellActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoSellActive = value
            if settings.autoSellActive then
                functions.startCoroutine("AutoSell", function()
                    while coroutines.AutoSell and coroutines.AutoSell.running do
                        local originalPosition = functions.teleportToSellCoordinates(services, tables)
                        if originalPosition then
                            pcall(function()
                                services.Sell_Inventory:FireServer()
                                functions.sendNotification(services, "Sold inventory!", "#008000")
                            end)
                            functions.teleportBack(services, originalPosition)
                        end
                        wait(settings.SellDelay * 60)
                    end
                    settings.autoSellActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoSell", coroutines)
                settings.autoSellActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.VisualsTab:Toggle({
        Title = "Fruit ESP",
        Icon = "eye",
        Value = settings.fruitESPActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.fruitESPActive = value
            if settings.fruitESPActive then
                functions.startCoroutine("FruitESP", function()
                    while coroutines.FruitESP and coroutines.FruitESP.running do
                        functions.processPlants(services, tables, settings)
                        wait(1)
                    end
                end, coroutines)
            else
                functions.stopCoroutine("FruitESP", coroutines)
                local farm = functions.findPlayerFarm(services)
                if farm then
                    local plantsFolder = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
                    if plantsFolder then functions.clearESPs(plantsFolder) end
                end
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.VisualsTab:Toggle({
        Title = "Pet Cooldown ESP",
        Icon = "clock",
        Value = settings.petCooldownESPActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.petCooldownESPActive = value
            if settings.petCooldownESPActive then
                functions.startCoroutine("PetCooldownESP", function()
                    while coroutines.PetCooldownESP and coroutines.PetCooldownESP.running do
                        functions.updatePetCooldowns(services, settings, petData, petModelCache)
                        wait(1)
                    end
                end, coroutines)
            else
                functions.stopCoroutine("PetCooldownESP", coroutines)
                functions.cleanupPetCooldownESP({}, petModelCache)
            end
            functions.saveSettings(settings)
        end
    })

    local sprinklerDropdown = Tabs.DeleteTab:Dropdown({
        Title = "Select Sprinklers to Delete",
        Values = {"All", unpack(tables.sprinklerTypes)},
        Value = settings.selectedSprinklers,
        Multi = true,
        AllowNone = true,
        Callback = function(selectedOptions)
            settings.selectedSprinklers = table.find(selectedOptions, "All") and tables.sprinklerTypes or {}
            selectedOptions = type(selectedOptions) == "table" and selectedOptions or {selectedOptions}
            for _, sprinkler in ipairs(selectedOptions) do
                if table.find(tables.sprinklerTypes, sprinkler) then table.insert(settings.selectedSprinklers, sprinkler) end
            end
            _G.selectedSprinklers = settings.selectedSprinklers
            if settings.autoDeleteSprinklersActive and #settings.selectedSprinklers == 0 then
                functions.stopCoroutine("AutoDeleteSprinklers", coroutines)
                settings.autoDeleteSprinklersActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.DeleteTab:Button({
        Title = "Delete All Sprinklers",
        Icon = "trash",
        Callback = function()
            functions.CoreFunctions.deleteAllSprinklers(services, tables)
        end
    })

    Tabs.DeleteTab:Toggle({
        Title = "Auto Delete Sprinklers",
        Icon = "trash",
        Value = settings.autoDeleteSprinklersActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.autoDeleteSprinklersActive = value
            if settings.autoDeleteSprinklersActive and #settings.selectedSprinklers > 0 then
                functions.startCoroutine("AutoDeleteSprinklers", function()
                    while coroutines.AutoDeleteSprinklers and coroutines.AutoDeleteSprinklers.running do
                        functions.CoreFunctions.deleteSprinklers(settings.selectedSprinklers, services)
                        wait(2)
                    end
                    settings.autoDeleteSprinklersActive = false
                end, coroutines)
            else
                functions.stopCoroutine("AutoDeleteSprinklers", coroutines)
                settings.autoDeleteSprinklersActive = false
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.MiscTab:Toggle({
        Title = "Anti Idle",
        Icon = "user",
        Value = settings.antiIdleActive,
        Type = "Checkbox",
        Callback = function(value)
            settings.antiIdleActive = value
            if settings.antiIdleActive then
                functions.startCoroutine("AntiIdle", function()
                    functions.antiAFK(services, coroutines)
                end, coroutines)
            else
                functions.stopCoroutine("AntiIdle", coroutines)
            end
            functions.saveSettings(settings)
        end
    })

    Tabs.MiscTab:Button({
        Title = "Save Settings",
        Icon = "save",
        Callback = function()
            functions.saveSettings(settings)
            functions.sendNotification(services, "Settings saved!", "#008000")
        end
    })

    Tabs.MiscTab:Button({
        Title = "Load Settings",
        Icon = "download",
        Callback = function()
            settings = functions.loadSettings(tables)
            functions.sendNotification(services, "Settings loaded!", "#008000")
        end
    })

    updateSeedInventoryDropdown()
    return Window
end

return createUI
