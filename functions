-- DEMONHUB Functions for Roblox Farming Game
-- Version: 1.0.3
local function initializeServices()
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local Players = game:GetService("Players")
    local TweenService = game:GetService("TweenService")
    local RunService = game:GetService("RunService")
    local Workspace = game:GetService("Workspace")
    local LocalPlayer = Players.LocalPlayer
    local Farms = Workspace.Farm
    local petsPhysical = Workspace:WaitForChild("PetsPhysical", 15)
    local GameEvents = ReplicatedStorage:WaitForChild("GameEvents", 15)
    return {
        ReplicatedStorage = ReplicatedStorage,
        Players = Players,
        TweenService = TweenService,
        RunService = RunService,
        Workspace = Workspace,
        LocalPlayer = LocalPlayer,
        Farms = Farms,
        petsPhysical = petsPhysical,
        ActivePetService = GameEvents:WaitForChild("ActivePetService", 15),
        BuyGearStock = GameEvents.BuyGearStock,
        BuyPetEgg = GameEvents.BuyPetEgg,
        Plant_RE = GameEvents.Plant_RE,
        BuySeedStock = GameEvents.BuySeedStock,
        GetPetCooldown = GameEvents:WaitForChild("GetPetCooldown"),
        Sell_Inventory = GameEvents.Sell_Inventory
    }
end

local function checkVersion(tables)
    local success, response = pcall(function()
        return game:HttpGet("https://raw.githubusercontent.com/fwogt/robloxv/refs/heads/main/v")
    end)
    if success then
        local githubVersion = response:match("^%s*(.-)%s*$")
        if githubVersion ~= tables.SCRIPT_VERSION then
            warn("Script version (" .. tables.SCRIPT_VERSION .. ") does not match GitHub version (" .. githubVersion .. "). Stopping script.")
            return false
        end
        return true
    else
        warn("Failed to check script version. Continuing execution.")
        return true
    end
end

local CoreFunctions = {}
function CoreFunctions.autoEquipShovel()
    local shovelName = "Shovel [Destroy Plants]"
    local shovel = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild(shovelName)
    if not shovel then
        shovel = LocalPlayer.Backpack:FindFirstChild(shovelName)
        if shovel then shovel.Parent = LocalPlayer.Character end
    end
    return shovel
end

function CoreFunctions.deleteAllSprinklers(services, tables)
    local farmFolder = services.Workspace:FindFirstChild("Farm")
    if not farmFolder then return end
    local playerFarm
    for _, farm in ipairs(farmFolder:GetChildren()) do
        local ownerData = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Data") and farm.Important.Data:FindFirstChild("Owner")
        if ownerData and ownerData.Value == services.LocalPlayer.Name then
            playerFarm = farm
            break
        end
    end
    if not playerFarm then return end
    local objectsFolder = playerFarm:FindFirstChild("Important") and playerFarm.Important:FindFirstChild("Objects_Physical")
    if not objectsFolder then return end
    local shovel = CoreFunctions.autoEquipShovel()
    wait(0.5)
    if not shovel then return end
    local shovelClient = shovel:FindFirstChild("MainScript") or shovel:FindFirstChildWhichIsA("Script") or shovel:FindFirstChildWhichIsA("LocalScript")
    _G.shovelClient = shovelClient
    _G.objectsFolder = objectsFolder
    CoreFunctions.setSelectedSprinklers(tables.sprinklerTypes)
    CoreFunctions.deleteSprinklers(tables.sprinklerTypes, services)
end

function CoreFunctions.deleteSprinklers(sprinklerArray, services)
    local targetSprinklers = sprinklerArray or _G.selectedSprinklers
    if #targetSprinklers == 0 then return end
    local shovel = services.LocalPlayer.Character and services.LocalPlayer.Character:FindFirstChild("Shovel [Destroy Plants]")
    if not shovel then
        CoreFunctions.autoEquipShovel()
        wait(0.5)
    end
    if not _G.objectsFolder then return end
    local success, destroyEnv = pcall(function()
        return _G.shovelClient and getsenv and getsenv(_G.shovelClient) or nil
    end)
    if not success or not destroyEnv then return end
    for _, obj in ipairs(_G.objectsFolder:GetChildren()) do
        for _, typeName in ipairs(targetSprinklers) do
            if obj.Name == typeName then
                pcall(function()
                    if destroyEnv and destroyEnv.Destroy and typeof(destroyEnv.Destroy) == "function" then
                        destroyEnv.Destroy(obj)
                    elseif obj and obj.Parent then
                        obj:Destroy()
                    end
                    if services.DeleteObject then services.DeleteObject:FireServer(obj) end
                    if services.RemoveItem then services.RemoveItem:FireServer(obj) end
                end)
            end
        end
    end
end

function CoreFunctions.getSprinklerTypes(tables) return tables.sprinklerTypes end
function CoreFunctions.addSprinklerToSelection(sprinklerName)
    for i, sprinkler in ipairs(_G.selectedSprinklers) do
        if sprinkler == sprinklerName then return false end
    end
    table.insert(_G.selectedSprinklers, sprinklerName)
    return true
end
function CoreFunctions.removeSprinklerFromSelection(sprinklerName)
    for i, sprinkler in ipairs(_G.selectedSprinklers) do
        if sprinkler == sprinklerName then
            table.remove(_G.selectedSprinklers, i)
            return true
        end
    end
    return false
end
function CoreFunctions.setSelectedSprinklers(sprinklerArray)
    _G.selectedSprinklers = sprinklerArray or {}
end
function CoreFunctions.getSelectedSprinklers() return _G.selectedSprinklers end
function CoreFunctions.clearSelectedSprinklers() _G.selectedSprinklers = {} end
function CoreFunctions.isSprinklerSelected(sprinklerName)
    for _, sprinkler in ipairs(_G.selectedSprinklers) do
        if sprinkler == sprinklerName then return true end
    end
    return false
end
function CoreFunctions.getSelectedSprinklersCount() return #_G.selectedSprinklers end
function CoreFunctions.getSelectedSprinklersString()
    if #_G.selectedSprinklers == 0 then return "None" end
    local selectionText = table.concat(_G.selectedSprinklers, ", ")
    return #selectionText > 50 and (selectionText:sub(1, 47) .. "...") or selectionText
end

local function isValidPetID(id)
    return typeof(id) == "string" and id:match("^%b{}$") ~= nil
end

local function getPetNames(services)
    local newPetData = {}
    local success = pcall(function()
        local PlayerGui = services.LocalPlayer:WaitForChild("PlayerGui", 5)
        local ActivePetUI = PlayerGui:WaitForChild("ActivePetUI", 5)
        local Frame = ActivePetUI:WaitForChild("Frame", 5)
        local Main = Frame:WaitForChild("Main", 5)
        local ScrollingFrame = Main:WaitForChild("ScrollingFrame", 5)
        for _, frame in pairs(ScrollingFrame:GetChildren()) do
            if frame:IsA("Frame") and isValidPetID(frame.Name) then
                local petTypeLabel = frame:FindFirstChild("PET_TYPE")
                if petTypeLabel and petTypeLabel:IsA("TextLabel") then
                    local petName = petTypeLabel.Text
                    if petName and petName ~= "" then
                        newPetData[frame.Name] = petName
                    end
                end
            end
        end
    end)
    return newPetData
end

local function getSeedInventory(services, tables)
    local seedInventory = {}
    local backpack = services.LocalPlayer:FindFirstChild("Backpack")
    if not backpack then return seedInventory end
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name:match("Seed") then
            local seedName = tool.Name:match("^(.+) Seed") or tool.Name
            if table.find(tables.allFruits, seedName) then
                table.insert(seedInventory, seedName)
            end
        end
    end
    return seedInventory
end

local function equipSeed(seedName, services)
    local backpack = services.LocalPlayer:FindFirstChild("Backpack")
    local character = services.LocalPlayer.Character
    if not (backpack and character and character:FindFirstChild("Humanoid")) then return false end
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and (tool.Name:match(seedName .. " Seed") or tool.Name == seedName) then
            character.Humanoid:EquipTool(tool)
            return true
        end
    end
    return false
end

local function equipEgg(eggName, services)
    local backpack = services.LocalPlayer:FindFirstChild("Backpack")
    local character = services.LocalPlayer.Character
    if not (backpack and character and character:FindFirstChild("Humanoid")) then return false end
    for _, tool in ipairs(backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name == eggName then
            character.Humanoid:EquipTool(tool)
            return true
        end
    end
    return false
end

local function getPlantMutations(plant, tables)
    local mutationList = {}
    for mutation, _ in pairs(tables.Mutations) do
        if plant:GetAttribute(mutation) == true then
            table.insert(mutationList, mutation)
        end
    end
    return mutationList
end

local function findPlayerFarm(services)
    for _, farm in ipairs(services.Farms:GetChildren()) do
        local ownerValue = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Data") and farm.Important.Data:FindFirstChild("Owner")
        if ownerValue and ownerValue:IsA("StringValue") and ownerValue.Value == services.LocalPlayer.Name then
            return farm
        end
    end
    return nil
end

local function CanHarvest(Plant)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if not Prompt or not Prompt.Enabled then return false end
    return true
end

local function IsTargetPlant(Plant, tables, settings)
    if #settings.TargetFruits > 0 and not table.find(settings.TargetFruits, Plant.Name) then return false end
    local weightValue = Plant:FindFirstChild("Weight")
    if not (weightValue and weightValue:IsA("NumberValue") and weightValue.Value >= settings.MinimumWeight) then return false end
    if #settings.TargetMutations > 0 then
        local mutations = getPlantMutations(Plant, tables)
        for _, targetMutation in ipairs(settings.TargetMutations) do
            if table.find(mutations, targetMutation) then return true end
        end
        return false
    end
    return true
end

local function CollectHarvestable(Parent, Plants, tables, settings)
    for _, Plant in ipairs(Parent:GetChildren()) do
        local Fruits = Plant:FindFirstChild("Fruits")
        if Fruits then CollectHarvestable(Fruits, Plants, tables, settings) end
        if CanHarvest(Plant) and IsTargetPlant(Plant, tables, settings) then table.insert(Plants, Plant) end
    end
    return Plants
end

local function GetHarvestablePlants(services, tables, settings)
    local Plants = {}
    local MyFarm = findPlayerFarm(services)
    if not MyFarm then return Plants end
    local PlantsPhysical = MyFarm:FindFirstChild("Important") and MyFarm.Important:FindFirstChild("Plants_Physical")
    if not PlantsPhysical then return Plants end
    return CollectHarvestable(PlantsPhysical, Plants, tables, settings)
end

local function HarvestPlant(Plant)
    local Prompt = Plant:FindFirstChild("ProximityPrompt", true)
    if Prompt then
        pcall(function() fireproximityprompt(Prompt) end)
    end
end

local function teleportToSellCoordinates(services, tables)
    local character = services.LocalPlayer.Character
    if character and character:FindFirstChild("HumanoidRootPart") then
        local originalPosition = character.HumanoidRootPart.CFrame
        character.HumanoidRootPart.CFrame = CFrame.new(tables.sellCoordinates)
        return originalPosition
    end
    return nil
end

local function getPlantingPosition(services, settings)
    if settings.plantingMode == "Saved Location" and settings.savedPlantingLocation then
        return settings.savedPlantingLocation
    else
        local character = services.LocalPlayer.Character
        return character and character:FindFirstChild("HumanoidRootPart") and character.HumanoidRootPart.Position or nil
    end
end

local function stopCoroutine(name, coroutines)
    if coroutines[name] then
        coroutines[name].running = false
        coroutines[name] = nil
    end
end

local function startCoroutine(name, func, coroutines)
    stopCoroutine(name, coroutines)
    coroutines[name] = {running = true}
    coroutines[name].thread = coroutine.create(func)
    coroutine.resume(coroutines[name].thread)
end

local function antiAFK(services, coroutines)
    while coroutines.AntiIdle and coroutines.AntiIdle.running do
        local character = services.LocalPlayer.Character
        if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
            local randomOffset = Vector3.new(math.random(-1, 1), 0, math.random(-1, 1)) * 0.2
            character.HumanoidRootPart.CFrame = character.HumanoidRootPart.CFrame + randomOffset
            if math.random() < 0.1 then
                character.Humanoid.Jump = true
            end
            if math.random() < 0.2 then
                local camera = services.Workspace.CurrentCamera
                if camera then
                    local randomAngle = math.random(-5, 5)
                    camera.CFrame = camera.CFrame * CFrame.Angles(0, math.rad(randomAngle), 0)
                end
            end
        end
        wait(20) -- Increased interval for lower resource usage
    end
end

local function secondsToMinSec(seconds)
    if not seconds or seconds <= 0 then return "Ready" end
    local minutes = math.floor(seconds / 60)
    local remainingSeconds = math.floor(seconds % 60)
    return string.format("%dm %ds", minutes, remainingSeconds)
end

local function getPetIds(services)
    local petIds = {}
    local pattern = "{.-}"
    local children = services.LocalPlayer.PlayerGui:WaitForChild("ActivePetUI"):WaitForChild("Frame"):WaitForChild("Main"):WaitForChild("ScrollingFrame"):GetChildren()
    for _, child in ipairs(children) do
        for match in string.gmatch(child.Name, pattern) do
            table.insert(petIds, match)
        end
    end
    return petIds
end

local function findPathByPetId(petId, services, petModelCache)
    if petModelCache[petId] then return petModelCache[petId] end
    local descendants = services.petsPhysical:GetDescendants()
    local matches = {}
    local pattern = "{.-}"
    for _, descendant in ipairs(descendants) do
        local name = descendant.Name
        for match in string.gmatch(name, pattern) do
            if match == petId then
                table.insert(matches, {instance = descendant})
            end
        end
    end
    if #matches > 0 then petModelCache[petId] = matches end
    return matches
end

local function createOrUpdatePetCooldownESP(petModel, petId, cooldownTime, services, petData)
    if not petModel or not petModel:IsA("Model") then return end
    local primaryPart = petModel.PrimaryPart or petModel:FindFirstChildWhichIsA("BasePart")
    if not primaryPart then return end
    local billboard = primaryPart:FindFirstChild("CooldownESP")
    if not billboard then
        billboard = Instance.new("BillboardGui")
        billboard.Name = "CooldownESP"
        billboard.Adornee = primaryPart
        billboard.Size = UDim2.new(0, 100, 0, 40) -- Reduced size for performance
        billboard.StudsOffset = Vector3.new(0, 2, 0)
        billboard.AlwaysOnTop = true
        billboard.LightInfluence = 0
        billboard.Parent = primaryPart
        local frame = Instance.new("Frame")
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundTransparency = 0.5
        frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
        frame.BorderSizePixel = 0
        frame.Parent = billboard
        local nameLabel = Instance.new("TextLabel")
        nameLabel.Name = "NameLabel"
        nameLabel.Size = UDim2.new(0.9, 0, 0.5, 0)
        nameLabel.Position = UDim2.new(0.05, 0, 0.1, 0)
        nameLabel.BackgroundTransparency = 1
        nameLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
        nameLabel.TextSize = 12
        nameLabel.TextScaled = true
        nameLabel.Parent = frame
        local cooldownLabel = Instance.new("TextLabel")
        cooldownLabel.Name = "CooldownLabel"
        cooldownLabel.Size = UDim2.new(0.9, 0, 0.5, 0)
        cooldownLabel.Position = UDim2.new(0.05, 0, 0.5, 0)
        cooldownLabel.BackgroundTransparency = 1
        cooldownLabel.TextColor3 = Color3.fromRGB(200, 255, 200)
        cooldownLabel.TextSize = 12
        cooldownLabel.TextScaled = true
        cooldownLabel.Parent = frame
    end
    local frame = billboard:FindFirstChildWhichIsA("Frame")
    local nameLabel = frame and frame:FindFirstChild("NameLabel")
    local cooldownLabel = frame and frame:FindFirstChild("CooldownLabel")
    if nameLabel and cooldownLabel then
        local petName = petData[petId] or "Unknown"
        local displayText = "CD: " .. secondsToMinSec(cooldownTime)
        if nameLabel.Text ~= petName then nameLabel.Text = petName end
        if cooldownLabel.Text ~= displayText then cooldownLabel.Text = displayText end
    end
end

local function cleanupPetCooldownESP(petIds, petModelCache)
    for cachedPetId, matches in pairs(petModelCache) do
        if not table.find(petIds, cachedPetId) then
            for _, match in ipairs(matches) do
                local petModel = match.instance
                if petModel then
                    local primaryPart = petModel.PrimaryPart or petModel:FindFirstChildWhichIsA("BasePart")
                    if primaryPart then
                        local billboard = primaryPart:FindFirstChild("CooldownESP")
                        if billboard then billboard:Destroy() end
                    end
                end
            end
            petModelCache[cachedPetId] = nil
        end
    end
end

local function updatePetCooldowns(services, settings, petData, petModelCache)
    if not settings.petCooldownESPActive then
        cleanupPetCooldownESP({}, petModelCache)
        return
    end
    petData = getPetNames(services)
    local petIds = getPetIds(services)
    if #petIds == 0 then
        cleanupPetCooldownESP(petIds, petModelCache)
        return
    end
    cleanupPetCooldownESP(petIds, petModelCache)
    for _, petId in ipairs(petIds) do
        local matches = findPathByPetId(petId, services, petModelCache)
        if #matches == 0 then continue end
        for _, match in ipairs(matches) do
            local petModel = match.instance
            local success, result = pcall(function()
                return services.GetPetCooldown:InvokeServer(petId)
            end)
            if success and result and result[1] and result[1].Time then
                createOrUpdatePetCooldownESP(petModel, petId, result[1].Time, services, petData)
            else
                createOrUpdatePetCooldownESP(petModel, petId, nil, services, petData)
            end
        end
    end
end

local function createESP(plant, weight, mutations, services)
    local part = plant:FindFirstChildWhichIsA("BasePart") or plant.PrimaryPart
    if not part then return end
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlantESP"
    billboard.Adornee = part
    billboard.Size = UDim2.new(0, 150, 0, 60)
    billboard.StudsOffset = Vector3.new(0, 3, 0)
    billboard.AlwaysOnTop = true
    billboard.LightInfluence = 0
    billboard.MaxDistance = 50
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 0.5
    frame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    frame.Parent = billboard
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(0.9, 0, 0.9, 0)
    textLabel.Position = UDim2.new(0.05, 0, 0.05, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.TextColor3 = Color3.fromRGB(240, 240, 240)
    textLabel.TextSize = 12
    textLabel.TextWrapped = true
    textLabel.TextYAlignment = Enum.TextYAlignment.Top
    local mutationText = #mutations > 0 and table.concat(mutations, ", ") or "None"
    textLabel.Text = string.format("%s\n%.1f kg\n%s", plant.Name, weight, mutationText)
    textLabel.Parent = frame
    billboard.Parent = part
end

local function clearESPs(plantsFolder)
    if not plantsFolder then return end
    for _, plant in ipairs(plantsFolder:GetChildren()) do
        for _, obj in ipairs(plant:GetDescendants()) do
            if obj:IsA("BillboardGui") and obj.Name == "PlantESP" then
                obj:Destroy()
            end
        end
    end
end

local function processPlants(services, tables, settings)
    if not settings.fruitESPActive then
        local farm = findPlayerFarm(services)
        if farm then
            local plantsFolder = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
            if plantsFolder then clearESPs(plantsFolder) end
        end
        return
    end
    local farm = findPlayerFarm(services)
    if not farm then return end
    local plantsFolder = farm:FindFirstChild("Important") and farm.Important:FindFirstChild("Plants_Physical")
    if not plantsFolder then return end
    clearESPs(plantsFolder)
    for _, plant in ipairs(plantsFolder:GetChildren()) do
        local fruitsFolder = plant:FindFirstChild("Fruits")
        if fruitsFolder then
            for _, subFruit in ipairs(fruitsFolder:GetChildren()) do
                local weightValue = subFruit:FindFirstChild("Weight")
                if weightValue and weightValue:IsA("NumberValue") then
                    local weight = math.round(weightValue.Value * 10) / 10
                    local mutations = getPlantMutations(subFruit, tables)
                    createESP(subFruit, weight, mutations, services)
                end
            end
        else
            local weightValue = plant:FindFirstChild("Weight")
            if weightValue and weightValue:IsA("NumberValue") then
                local weight = math.round(weightValue.Value * 10) / 10
                local mutations = getPlantMutations(plant, tables)
                createESP(plant, weight, mutations, services)
            end
        end
    end
end

local function saveSettings(settings)
    local HttpService = game:GetService("HttpService")
    local SETTINGS_FILE = "DEMONHUB_Settings.json"
    pcall(function()
        writefile(SETTINGS_FILE, HttpService:JSONEncode(settings))
    end)
end

local function loadSettings(tables)
    local HttpService = game:GetService("HttpService")
    local SETTINGS_FILE = "DEMONHUB_Settings.json"
    local success, settings = pcall(function()
        return HttpService:JSONDecode(readfile(SETTINGS_FILE))
    end)
    if success then
        return settings
    end
    return tables.defaultSettings
end

return {
    initializeServices = initializeServices,
    checkVersion = checkVersion,
    CoreFunctions = CoreFunctions,
    getPetNames = getPetNames,
    getSeedInventory = getSeedInventory,
    equipSeed = equipSeed,
    equipEgg = equipEgg,
    getPlantMutations = getPlantMutations,
    findPlayerFarm = findPlayerFarm,
    CanHarvest = CanHarvest,
    IsTargetPlant = IsTargetPlant,
    CollectHarvestable = CollectHarvestable,
    GetHarvestablePlants = GetHarvestablePlants,
    HarvestPlant = HarvestPlant,
    teleportToSellCoordinates = teleportToSellCoordinates,
    getPlantingPosition = getPlantingPosition,
    stopCoroutine = stopCoroutine,
    startCoroutine = startCoroutine,
    antiAFK = antiAFK,
    updatePetCooldowns = updatePetCooldowns,
    processPlants = processPlants,
    saveSettings = saveSettings,
    loadSettings = loadSettings
}
